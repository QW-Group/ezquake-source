{
  "+attack": {
    "description": "When active the player will fire the weapon he is currently holding.\nThis is the primary command used to make the player fire the gun.\nFor as long as the key that is bound to this command is held down and this command is active the player will keep on firing the gun."
  },
  "+attack2": {
    "description": "Secondary attack button."
  },
  "+back": {
    "description": "When active the player will move backwards."
  },
  "+cl_wp_stats": {
    "system-generated": true
  },
  "+fire": {
    "system-generated": true
  },
  "+forward": {
    "description": "When active the player will move forward."
  },
  "+jump": {
    "description": "When active the player will do a single jump. The next jump won't be performed until \"-jump\" has been issued."
  },
  "+klook": {
    "description": "When active, \"+forward\" and \"+back\" become \"+lookup\" and \"+lookdown\"  respectively.\nThis command is useful if the player needs to look at objects which are above or below him."
  },
  "+left": {
    "description": "When active the player will turn left."
  },
  "+lookdown": {
    "description": "When active the player will look down."
  },
  "+lookup": {
    "description": "When active the player will look up."
  },
  "+mlook": {
    "description": "When active moving the mouse or joystick forwards and backwards performs \"+lookup\" and \"+lookdown\" respectively.\nThis command is very useful if the player needs to look at objects which are above or below him.\nMost players execute this command and never remove it. This way they can use the keyboard to move the player forward and back and strafe left and right, while using the mouse to turn the player left and right and to make him look up and down.\nIn order to have this command set permanently you will have to create a file called autoexec.cfg in the qw/ directory and put in the line \"+mlook\" into that file.\nBy doing this the game will automatically execute the autoexec.cfg file and it will also active that command.\nAlmost every player uses this command nowadays, because the combination of using mouse and keyboard is widely considered the best."
  },
  "+movedown": {
    "description": "When active the player will swim down when in the water."
  },
  "+moveleft": {
    "description": "When active the player will strafe left."
  },
  "+moveright": {
    "description": "When active the player will strafe right."
  },
  "+moveup": {
    "description": "When active the player will swim up when in the water."
  },
  "+qtv_delay": {
    "system-generated": true
  },
  "+right": {
    "description": "When active the player will turn right."
  },
  "+showscores": {
    "description": "Display scoreboard."
  },
  "+showteamscores": {
    "description": "Display team scoreboard."
  },
  "+speed": {
    "description": "When active the player will run."
  },
  "+strafe": {
    "description": "When active, \"+left\" and \"+right\" function like \"+moveleft\" and \"+moveright\", strafing in that direction."
  },
  "+use": {
    "description": "When used it will activate objects in the game that have been designed to react at \"+use\""
  },
  "+voip": {
    "system-generated": true
  },
  "+zoom": {
    "system-generated": true
  },
  "-attack": {
    "description": "When used the player will stop firing the gun if \"+attack\" is active."
  },
  "-attack2": {
    "description": "Secondary attack button."
  },
  "-back": {
    "description": "When used the player will stop moving back if \"+back\" is active."
  },
  "-cl_wp_stats": {
    "system-generated": true
  },
  "-fire": {
    "system-generated": true
  },
  "-forward": {
    "description": "When used the player will stop moving forward if \"+forward\" is active."
  },
  "-jump": {
    "description": "When used the player will stop jumping if \"+jump\" is active."
  },
  "-klook": {
    "description": "When used the forward and back keys will stop making the player look up and down if \"+klook\" is active."
  },
  "-left": {
    "description": "When used the player will stop turning left if \"+left\" is active."
  },
  "-lookdown": {
    "description": "When used the player will stop looking down if \"+lookdown\" is active."
  },
  "-lookup": {
    "description": "When used the player will stop looking up if \"+lookup\" is active."
  },
  "-mlook": {
    "description": "When used the mouse forward and back movement will stop making the player look up and down if \"+mlook\" is active."
  },
  "-movedown": {
    "description": "When used the player will stop moving down if \"+movedown\" is active."
  },
  "-moveleft": {
    "description": "When used the player will stop moving left if \"+moveleft\" is active."
  },
  "-moveright": {
    "description": "When used the player will stop moving right if \"+moveright\" is active."
  },
  "-moveup": {
    "description": "When used the player will stop moving up if \"+moveup\" is active."
  },
  "-qtv_delay": {
    "system-generated": true
  },
  "-right": {
    "description": "When used the player will stop turning right if \"+right\" is active."
  },
  "-showscores": {
    "description": "When used the score screen will disappear if +showscores is active."
  },
  "-showteamscores": {
    "description": "When used the score screen will disappear if +showteamscores is active."
  },
  "-speed": {
    "description": "When used the player will walk."
  },
  "-strafe": {
    "description": "When used the turn left and turn right keys will once again perform their original functions."
  },
  "-use": {
    "description": "When used it will stop activating objects in the game that have been designed to react at \"+use\"."
  },
  "-voip": {
    "system-generated": true
  },
  "-zoom": {
    "system-generated": true
  },
  "acc_block": {
    "system-generated": true
  },
  "acc_create": {
    "system-generated": true
  },
  "acc_list": {
    "system-generated": true
  },
  "acc_remove": {
    "system-generated": true
  },
  "acc_unblock": {
    "system-generated": true
  },
  "addip": {
    "description": "Add a single IP or a domain of IPs to the IP list of the server.\nVery useful for banning people or for specifying which IPs only have access to the server.\n\nExamples:\naddip 123.123.123.123\naddip 123.123.123",
    "syntax": "<ip>"
  },
  "addloc": {
    "arguments": [
      {
        "description": "The name of the loc.",
        "name": "locname"
      }
    ],
    "description": "Adds a new loc with the specified name at current location.",
    "syntax": "\"locname\""
  },
  "addserver": {
    "description": "Server Browser: This allows you to add a server to the UNBOUND source.\nThis can be used to quickly bookmark servers."
  },
  "alias": {
    "description": "Used to create a reference to a command or list of commands.\nWhen used without parameters, displays all current aliases.",
    "remarks": "Enclose multiple commands within quotes and separate each command with a semi-colon."
  },
  "alias_in": {
    "arguments": [
      {
        "description": "Alias to be changed",
        "name": "alias"
      },
      {
        "description": "Variable whose value is inserted into alias",
        "name": "variable"
      },
      {
        "description": "Bitmask:\n0 - insert from left\n1 - from right side\n2 - check in advance whether a string being inserted already exists in alias\n4 - print an error message if the inserted string is already present in the alias\n8 - automatically create an alias if it doesn't exist yet",
        "name": "options"
      }
    ],
    "description": "Inserts contents of variable into alias.",
    "syntax": "<alias> <variable> [<options>]"
  },
  "alias_out": {
    "system-generated": true
  },
  "aliasedit": {
    "description": "Allows you to edit your alias in console manually.",
    "syntax": "<alias>"
  },
  "aliaslist": {
    "arguments": [
      {
        "description": "Prints only [regexp] matching aliases",
        "name": "[regexp]"
      }
    ],
    "description": "Prints all aliases.",
    "syntax": "[regexp]"
  },
  "align": {
    "system-generated": true
  },
  "allskins": {
    "description": "Downloads all skins that is currently in use.\nUseful for refreshing skins without exiting the level."
  },
  "authenticate": {
    "system-generated": true
  },
  "autotrack": {
    "description": "Toggles auto-tracking.\nAuto-tracking switches views for you when you are a spectator or when you are watching a demo or a broadcasted QTV match.\nIt chooses the best available autotrack - if you are spectator, looks for server-side command autotrack, if you are watching a demo or QTV stream, turns on both demo_autotrack and mvd_autotrack, mvd_autotrack will get turned off as soon as demo_autotrack data are found.\nAs a last resort if all previous autotrack are not available, cl_hightrack will be used."
  },
  "bar_armor": {
    "description": "HUD element that displays a bar representing your amount of armor."
  },
  "bar_health": {
    "description": "HUD element that displays a bar representing your amount of health."
  },
  "batteryinfo": {
    "system-generated": true
  },
  "bf": {
    "description": "This command shows a background screen flash that is the same one that is produced when the player picked up an item in the game.\nThis command basically serves no useful function except when people want to use it in scripts to give the user some visual feedback when an aliases is used for example."
  },
  "bind": {
    "description": "This command binds one or several commands to a key.\nTo bind multiple commands to a key, enclose the commands in double-quotes (\") and separate them with semicolons (;)."
  },
  "bindlist": {
    "description": "Prints all binds."
  },
  "calc_fov": {
    "arguments": [
      {
        "description": "The old wide aspect FOV used in v2.x",
        "name": "old_fov"
      }
    ],
    "description": "Converts (ezq2) wide aspect FOV to new FOV."
  },
  "calendar": {
    "description": "Same as \"date\" but also shows a small calendar of the month. Nice :)"
  },
  "cam_angles": {
    "arguments": [
      {
        "description": "",
        "name": "pitch"
      },
      {
        "description": "",
        "name": "yaw"
      }
    ],
    "description": "Set new camera angles.",
    "syntax": "<pitch> <yaw> or cam_angles \"pitch yaw\""
  },
  "cam_pos": {
    "arguments": [
      {
        "description": "X coordinate",
        "name": "x"
      },
      {
        "description": "Y coordinate",
        "name": "y"
      },
      {
        "description": "Z coordinate",
        "name": "z"
      }
    ],
    "description": "Set new camera position.",
    "syntax": "<x> <y> <z> or cam_pos \"x y z"
  },
  "cancel": {
    "system-generated": true
  },
  "cd": {
    "description": "cd play 5 plays cd track #5",
    "remarks": "You need -cdaudio to use this command."
  },
  "centerview": {
    "description": "Centers the player's view ahead after +lookup or +lookdown."
  },
  "cfg_load": {
    "description": "This will do a cfg_reset and then execute filename.cfg (ezquake/configs).",
    "syntax": "<filename>"
  },
  "cfg_reset": {
    "description": "This command will unbind all keys, delete all aliases, msg_triggers, reset all plus commands, teamplay settings and reset all variables.\nUser made variables (created with set/seta) are deleted.\nAfter resetting all the above, it executes default.cfg and then autoexec.cfg."
  },
  "cfg_save": {
    "description": "This command will dump all aliases, bindings, plus commands, msg_triggers, teamplay settings and variables to filename.cfg .\nUser made variables (created with set/seta) are saved as well.",
    "remarks":"configs saved with cfg_save are saved in quake/ezquake/configs/*.cfg",
    "syntax": "<filename>"
  },
  "check_maps": {
    "system-generated": true
  },
  "cl_messages": {
    "description": "Prints amount and size of messages sent from server to ezQuake client."
  },
  "clear": {
    "description": "This command clears the console screen of any text."
  },
  "clearlocs": {
    "description": "Clear all currently loaded locs."
  },
  "cmd": {
    "description": "Sends a command directly to the server."
  },
  "cmdlist": {
    "description": "Prints a list of all available commands into the console."
  },
  "cmdlist_re": {
    "description": "This command same as cmdlist, but supports (perl) regexp matching."
  },
  "color": {
    "description": "This command sets the color for the player's shirt and pants.",
    "remarks": "If only the shirt color is given, the pant color will match."
  },
  "connect": {
    "arguments": [
      {
        "description": "IP address of a QuakeWorld server.",
        "name": "address"
      }
    ],
    "description": "Connects your client to a QuakeWorld server.",
    "syntax": "<address>"
  },
  "connectbr": {
    "system-generated": true
  },
  "cuff": {
    "system-generated": true
  },
  "cvar_in": {
    "system-generated": true
  },
  "cvar_out": {
    "system-generated": true
  },
  "cvar_reset": {
    "description": "Resets the cvar to default.\n\nExample:\ncvar_reset topcolor\n - sets topcolor to default.",
    "syntax": "<cvar>"
  },
  "cvar_reset_re": {
    "description": "Resets cvar(s) matching the regex to default.\n\nExample:\ncvar_reset ^gl_.*\n- resets all gl_ settings to default values.",
    "syntax": "[regex]"
  },
  "cvaredit": {
    "system-generated": true
  },
  "cvarlist": {
    "description": "Print cvars."
  },
  "cvarlist_re": {
    "description": "This command same as cvarlist, but supports (perl) regexp matching."
  },
  "date": {
    "description": "Shows current time, date, month and year."
  },
  "demo_capture": {
    "arguments": [
      {
        "description": "Tells the client to start capturing.",
        "name": "start"
      },
      {
        "description": "Duration of the capture, in seconds.\nCan be float value. Must be positive. Required argument.",
        "name": "time"
      },
      {
        "description": "An .avi file is saved instead of screenshots. See demo_capture_codec.",
        "name": "avifile"
      },
      {
        "description": "Stop the capture manually before <time>.\nExample: demo_capture stop",
        "name": "stop"
      }
    ],
    "description": "Captures a series of screenshots or an .avi file.",
    "syntax": "<start> <time> [avifile] | <stop>"
  },
  "demo_controls": {
    "system-generated": true
  },
  "demo_jump": {
    "description": "Jumps playback to a point in time.\n\nExamples:\ndemo_jump 120\n - Jump playback to 120 seconds from the start of the demo.\ndemo_jump 4:30\n - Jump playback to 4 minutes and 30 seconds from the start of the demo.",
    "syntax": "[+|-][m:]<s>"
  },
  "demo_jump_mark": {
    "system-generated": true
  },
  "demo_jump_status": {
    "arguments": [
      {
        "description": "For example h<1 +rl or +lg",
        "name": "condition"
      }
    ],
    "description": "Fast-forward in the demo playback until certain condition holds.",
    "syntax": "<condition>"
  },
  "demo_playlist_clear": {
    "description": "Clears the demo playlist."
  },
  "demo_playlist_next": {
    "description": "Goes to the next demo in the playlist."
  },
  "demo_playlist_prev": {
    "description": "Goes to the previous demo in the playlist."
  },
  "demo_playlist_stop": {
    "description": "Stops the demo playlist playback."
  },
  "demo_setspeed": {
    "description": "You can vary the speed of demo playback with the 'demo_setspeed' command.\n'demo_setspeed x' sets the playback speed to x% of normal speed so that 'demo_setspeed 50' is half speed and 'demo_setspeed 300' gives you triple speed.",
    "syntax": "[default: 100]"
  },
  "describe": {
    "description": "Prints manual info about given variable or command into the console.",
    "syntax": "<variable or command name>"
  },
  "dev_cache_print": {
    "system-generated": true
  },
  "dev_cache_report": {
    "system-generated": true
  },
  "dev_dump_defaults": {
    "system-generated": true
  },
  "dev_gfxbenchmarklightmaps": {
    "system-generated": true
  },
  "dev_gfxtrace": {
    "system-generated": true
  },
  "dev_help_issues": {
    "system-generated": true
  },
  "dev_help_verify_config": {
    "system-generated": true
  },
  "dev_hunk_print": {
    "system-generated": true
  },
  "dev_physicsnormalsave": {
    "system-generated": true
  },
  "dev_physicsnormalset": {
    "system-generated": true
  },
  "dev_physicsnormalshow": {
    "system-generated": true
  },
  "dev_pointfile": {
    "description": "The pointfile command will load a .pts file and give a dotted line indicating where the leak(s) are on the level.",
    "syntax": "<filename>",
    "remarks":"If a leak exists in the level, qbsp generates a non-zero .pts file in the maps directory."
  },
  "devmap": {
    "description": "Try it in cheats mode, start a map (devmap dm6) and type fly."
  },
  "dir": {
    "system-generated": true
  },
  "disconnect": {
    "description": "This command will disconnect you from the server/demo/proxy you are currently connected to."
  },
  "dns": {
    "description": "Performs DNS lookups and reverse lookups.",
    "syntax": "<address>"
  },
  "download": {
    "description": "Manually download a quake file from the server.\n\nExample:\ndownload skins/foo.pcx"
  },
  "easyrecord": {
    "description": "This start recording demo and rename it like you have put with match_* settings."
  },
  "echo": {
    "description": "This command will print text to your local console.",
    "syntax": "<text>"
  },
  "edict": {
    "description": "Reports information on a given edict in the game."
  },
  "edictcount": {
    "description": "Displays summary information on the edicts in the game."
  },
  "edicts": {
    "description": "Displays information on all edicts in the game."
  },
  "enemycolor": {
    "description": "This will override enemy color.\n\nExample:\nenemycolor 12 13",
    "remarks": "If only the shirt color is given, the pant color will match."
  },
  "eval": {
    "arguments": [
      {
        "description": "Arithmetic expression, can also contain strings",
        "name": "expression"
      }
    ],
    "description": "Evaluates given expression and prints the result into the console.",
    "syntax": "<expression>"
  },
  "exec": {
    "description": "Executes a config file from \\qw, \\id1 or \\ezquake."
  },
  "f_modified": {
    "description": "All the usual dm models, sounds, palettes etc are included in the check.\nIn Team Fortress the TF flag, dispensers and sentry guns are also checked. There is also an f_modified command which will print your f_modified response.",
    "remarks":"You need to install security files."
  },
  "f_ruleset": {
    "system-generated": true
  },
  "f_server": {
    "description": "Prints proxies you are using."
  },
  "filter": {
    "description": "Message filtering system. Only team messages are filtered.\nUse filter with no parameters to list current filters and filter clear to remove all filters.\n\nExample:\nfilter #a  say_team i can see this message #a.\nsay_team i can't see this message #d."
  },
  "find": {
    "system-generated": true
  },
  "find_update": {
    "system-generated": true
  },
  "floodprot": {
    "arguments": [
      {
        "description": "Number of allowed messages per client in given time period.",
        "name": "messages"
      },
      {
        "description": "Time period in which more than <messages> cannot be sent by a client.",
        "name": "seconds"
      },
      {
        "description": "Time the flooding player will be muted for.",
        "name": "silence"
      }
    ],
    "description": "Sets flood protection parameters.",
    "syntax": "<messages> <seconds> <silence>"
  },
  "floodprotmsg": {
    "system-generated": true
  },
  "flush": {
    "description": "This command will clear the current game cache.\nIt is usually used by developers to flush the memory of all game information and objects to test if the mechanism which handles the loading of the necessary files into memory works properly.\nSometimes the game cache can become filled with unnecessary information and may need to be flushed manually. This is usually not necessary since the game automatically flushes all the data between every map."
  },
  "fly": {
    "description": "You can fly around the map with flymode on.",
    "remarks": "Needs cheat support by server."
  },
  "fog": {
    "description": "Changes color of fog.",
    "syntax": "R G B"
  },
  "fontlist": {
    "description": "Lists TrueType fonts available on the system."
  },
  "fontload": {
    "description": "Loads specified TrueType font for use where _proportional is set."
  },
  "force_centerview": {
    "description": "This command centers the player's screen.\nIt was created because the original \"centerview\" command did not work when \"+mlook\" was enabled.\nThis command will center the screen in any mode no matter commands are active."
  },
  "fraglogfile": {
    "description": "Enables logging of kills to a file.\nUseful for external frag polling programs.\nThe file name is frag_##.log"
  },
  "fs_diff": {
    "system-generated": true
  },
  "fs_dir": {
    "system-generated": true
  },
  "fs_loadpak": {
    "system-generated": true
  },
  "fs_locate": {
    "system-generated": true
  },
  "fs_path": {
    "system-generated": true
  },
  "fs_removepak": {
    "system-generated": true
  },
  "fs_restart": {
    "system-generated": true
  },
  "fs_search": {
    "description": "Search the filesystem cache by suffix."
  },
  "fullinfo": {
    "description": "Used by QuakeSpy and Qlist to set setinfo variables.\n\nExample:\nfullinfo \"\\quote\\I am the only Lamer!\\\"",
    "remarks": "Use the setinfo command to see the output."
  },
  "gamedir": {
    "description": "Specifies the directory where the QWPROGS.DAT file is found and other additional files such as maps, models, sound, and skins for Quake modifications.",
    "remarks": "This command can be specified while a game is in progress, after the current map ends this command will take effect."
  },
  "gamma": {
    "description": "You can edit brightness.",
    "remarks": "This is a shortcut for sw_gamma in vga and gl_gamma in gl."
  },
  "give": {
    "description": "Give user a certain amount of an item.\nItems:\n1 - Axe\n2 - Shotgun\n3 - Double-Barrelled Shotgun\n4 - Nailgun\n5 - Super Nailgun\n6 - Grenade Launcher\n7 - Rocket Launcher\n8 - ThunderBolt\nC - Cells\nH - Health\nN - Nails\nR - Rockets\nS - Shells\n\nExamples:\ngive 1234 R 99\n - gives 99 rockets to user 1234\ngive 1234 7\n - gives the rocket launcher to user 1234",
    "remarks": "The -cheats parameter must be used to launch the server to use the give command. Also the key and value *cheats ON will be displayed in the serverinfo information."
  },
  "gl_checkmodels": {
    "description": "Not well implemented yet. Quickly looks at the pmodel and emodel listed in every player's infokey and reports anything unusual it finds.\nBasically it saves you having to type \"users. user x\" and then comparing the models for everyone."
  },
  "gl_inferno": {
    "description": "Clientside (no one else can see it) hard-striking rocket, serves well for your entertainment."
  },
  "gl_setmode": {
    "description": "Quickly sets many variables to fit pre-defined scheme.\nTry using \"newtrails\" or \"vultwah\".",
    "syntax": "<modename>"
  },
  "god": {
    "description": "You are immortal with god mode on.",
    "remarks": "Needs cheats support by server."
  },
  "hash": {
    "system-generated": true
  },
  "heartbeat": {
    "description": "Forces a heartbeat to be sent to the master server.\nA heartbeat informs the master server of the server's IP address thus making sure that the master server knows that the server is still alive."
  },
  "help": {
    "description": "Enters manual pages. Use arrows, [Page Down], [Page Up], [Tab] and [Enter] for navigation."
  },
  "hide": {
    "system-generated": true
  },
  "HUD262_add": {
    "arguments": [
      {
        "description": "Can be cvar or str",
        "name": "type"
      },
      {
        "description": "String or cvarname",
        "name": "param"
      }
    ],
    "description": "Creates or changes a HUD element with hud_name.\nThe following types of HUD elements are available:\ncvar - a value of a variable is displayed; in this case param must be a name of this variable.\nstr - a string defined by param is displayed\nCvar and %macros expansion is performed every time element is shown.",
    "syntax": "<hud_name> <type> <param>"
  },
  "HUD262_alpha": {
    "arguments": [
      {
        "description": "HUD element's name",
        "name": "name"
      },
      {
        "description": "From 0 up to 1 (0 - invisible, 1 - opaque)",
        "name": "value"
      }
    ],
    "description": "Sets a transparency for strings-HUD element.",
    "syntax": "<name> <value>"
  },
  "HUD262_bg": {
    "arguments": [
      {
        "description": "HUD element's name",
        "name": "hud_name"
      },
      {
        "description": "color 111 - yellow, 79 - red, etc",
        "name": "bg_color"
      }
    ],
    "description": "Defines a color of the HUD element background.\n0 - transparent (default).",
    "syntax": "<hud_name> <bg_color>"
  },
  "HUD262_blink": {
    "arguments": [
      {
        "description": "HUD element's name",
        "name": "name"
      },
      {
        "description": "Blinking period in milliseconds",
        "name": "period"
      },
      {
        "description": "Defines what exactly should blink:\n0 - nothing\n1 - text only\n2 - background only\n3 - text and background",
        "name": "mask"
      }
    ],
    "description": "Allows to make blinking strings-HUD elements.",
    "syntax": "<name> <period> <mask>"
  },
  "HUD262_bringtofront": {
    "arguments": [
      {
        "description": "HUD element's name",
        "name": "name"
      }
    ],
    "description": "Transfers all HUD elements created after hud_name element (including) to the end of drawing list, that in short means that they will be displayed above all other elements which could be present on that place already.",
    "syntax": "<name>"
  },
  "HUD262_disable": {
    "arguments": [
      {
        "description": "HUD element's name",
        "name": "hud_name"
      }
    ],
    "description": "Prohibits to display one or more HUD elements.",
    "syntax": "<hud_name> [hud_name2...]"
  },
  "HUD262_enable": {
    "arguments": [
      {
        "description": "HUD element's name",
        "name": "hud_name"
      }
    ],
    "description": "Allows to display one or more HUD elements.",
    "syntax": "<hud_name> [hud_name2...]"
  },
  "HUD262_list": {
    "arguments": [
      {
        "description": "Print only [regexp] matching HUDs",
        "name": "regexp"
      }
    ],
    "description": "Prints a list of strings-HUD elements.",
    "syntax": "[regexp]"
  },
  "HUD262_move": {
    "arguments": [
      {
        "description": "HUD element's name",
        "name": "hud_name"
      },
      {
        "description": "Horizontal shift",
        "name": "dx"
      },
      {
        "description": "Vertical shift",
        "name": "dy"
      }
    ],
    "description": "Moves a HUD element.\ndx and dy deviations are measured in symbols.",
    "syntax": "<hud_name> <dx> <dy>"
  },
  "HUD262_position": {
    "arguments": [
      {
        "description": "Name of your HUD element",
        "name": "hud_name"
      },
      {
        "description": "Position:\n1 - upper left corner\n2 - upper right corner\n3 - lower right corner\n4 - lower left corner\n5 - upper central position\n6 - lower central position",
        "name": "pos"
      },
      {
        "description": "Horizontal offset",
        "name": "x"
      },
      {
        "description": "Vertical offset",
        "name": "y"
      }
    ],
    "description": "Indicates position of a HUD element on the screen.",
    "syntax": "<hud_name> <pos> <x> <y>"
  },
  "HUD262_remove": {
    "arguments": [
      {
        "description": "HUD element's name",
        "name": "hud_name"
      }
    ],
    "description": "Kills a HUD element.",
    "syntax": "<hud_name>"
  },
  "HUD262_width": {
    "arguments": [
      {
        "description": "HUD element's name",
        "name": "hud_name"
      },
      {
        "description": "The range of width is 0-128, the value 0 (default) cancels the width forcing.",
        "name": "width"
      }
    ],
    "description": "Forces a HUD element width and cuts undesired space or adds it when needed.",
    "syntax": "<hud_name> <width>"
  },
  "hud_editor": {
    "description": "Toggles the HUD editor on or off."
  },
  "hud_export": {
    "arguments": [
      {
        "description": "Name (with optional path) of saved file. If .cfg extension is not present it will be automatically added.",
        "name": "filename"
      }
    ],
    "description": "Saves setup of your HUD (scr_newHUD 1) into a separate .cfg file.",
    "syntax": "<filename>"
  },
  "hud_fps_min_reset": {
    "system-generated": true
  },
  "hud_recalculate": {
    "description": "Refresh the positions of your HUD elements."
  },
  "if": {
    "arguments": [
      {
        "description": "A string where you usually use your own text, macros, and values of variables (like $volume).",
        "name": "expr1"
      },
      {
        "description": "==, =, !=, <>, >, <, >=, <=, isin, !isin\nWhere 'isin' means \"expr1 is a substring of expr2\" and '!isin' is a negation of this.\nThe others are standard mathematical comparison.",
        "name": "operator"
      },
      {
        "description": "See expr1",
        "name": "expr2"
      },
      {
        "description": "Will get executed if the binary operation succeeds.",
        "name": "cmd1"
      },
      {
        "description": "Will get executed if the binary operation fails.",
        "name": "cmd2"
      }
    ],
    "description": "Condition clause.",
    "syntax": "<expr1> <operator> <expr2> <cmd1> [else <cmd1>]"
  },
  "if_exists": {
    "description": "If an object <name> of a type <type> exists, a command <cmd1> will be issued, or a command <cmd2> if such object could not be found.\nThe type of the object can be either cvar, alias, trigger or HUD.",
    "syntax": "<type> <name>  <cmd1> [<cmd2>]"
  },
  "ignore": {
    "description": "You can give ignore either a player's name (name completion is useful for this) or a user ID (ignore <name|userid>).\nIgnore without any command line parameters displays your ignore list.",
    "syntax": "<name|userid>"
  },
  "ignore_id": {
    "description": "Identical to ignore, except it only accepts user IDs (only useful if there is a player whose name is the user ID of someone you want to ignore).",
    "syntax": "<userid>"
  },
  "ignore_team": {
    "description": "Ignores a team instead of players.\n\nExample:\nignore_team nine\n - ignores whole clan nine."
  },
  "ignore_voip": {
    "system-generated": true
  },
  "ignorelist": {
    "description": "Prints ignore list."
  },
  "impulse": {
    "description": "This command calls a game function or QuakeC function.\nOften impulses are used by the mod by defining aliases for game functions like \"ready\" and \"break\" that call certain impulses."
  },
  "in_evdevlist": {
    "description": "Prints list of evdev devices.\nIf the list is empty, you probably don't have access rights to /dev/input/eventX\nsudo chmod 644 /dev/input/event* should help you."
  },
  "in_restart": {
    "system-generated": true
  },
  "inc": {
    "description": "Increments a variable by one or adds to it the optional second argument.\nThere are no 'add' or 'dec' commands because 'inc' can handle both addition and subtraction.\n\nExample:\ninc sensitivity -2\n - subtracts 2 from sensitivity."
  },
  "itemsclock": {
    "description": "HUD element displaying items that will spawn soon in the game. Works only in MVD and QTV playback."
  },
  "join": {
    "description": "Joins a specified server as player.\nIf no address is specified, join will reconnect to the last visited server as a player.\n\nExample:\njoin 123.124.125.126",
    "syntax": "<address>"
  },
  "joyadvancedupdate": {
    "description": "This command initializes the joystick's advanced features.\nIt is necessary to issue this command after making any changes to the other joystick commands.\nThis command will initialize all of the settings."
  },
  "keycode": {
    "description": "This command enables the setting of a new keymapping.",
    "syntax": "[ext] <scancode> <key> [<shiftmap>] [<altgrmap>]"
  },
  "keymap_init": {
    "description": "This resets the current keymapping and then generates a copy of the internal defaults (US keyboard) to be the new keymappings.\nThis can be used as a base to generate a new keymapping file.\nIt has the same (unchangeable) mapping as the example keymap file \"default.kmap\""
  },
  "keymap_list": {
    "description": "This command prints all the current keymappings to the quake console."
  },
  "keymap_load": {
    "description": "This command first resets the current keymappings and then loads a new mapping from the given file.",
    "syntax": "keymap_load [layoutname] <filename>"
  },
  "keymap_reset": {
    "description": "This command switches off the current keymappings and sets it back to the internal defaults; it also restores \"keymap_name\" to its default name \"Default\".\nThe defaults are an internally defined (and not changeable) keymapping for US keyboards."
  },
  "keymap_save": {
    "description": "With this command the active keymappings will be written to a .kmap file (including a descriptive header which explains the usage).",
    "syntax": "[layoutname] <filename>"
  },
  "keymaplist": {
    "description": "This command prints all the current keymappings to the quake console."
  },
  "kick": {
    "description": "Removes a user from the server. Use the status command to receive the user's id.\n\nExample:\nkick 1234",
    "syntax": "<userid>"
  },
  "kill": {
    "description": "Suicide. (-2 frags on ktpro/kteam servers)"
  },
  "legacyquake": {
    "arguments": [
      {
        "description": "Optional argument, when specified, will disable only new features from specified client version",
        "name": "ver"
      }
    ],
    "description": "Command that turns off new features added to the client that may confuse experienced users who don't like new features :-)",
    "syntax": "[ver]"
  },
  "listip": {
    "description": "Prints out the current list of IPs on the server list. Not to be confused with the status command which prints out the list of the IPs of the connected players."
  },
  "load": {
    "description": "Load 123 loads saved game 123.",
    "syntax": "<filename>"
  },
  "loadFragfile": {
    "system-generated": true
  },
  "loadcharset": {
    "description": "You can change your console font from within ezQuake. Put all your charset images in qw/textures/charsets/*.png (and *.tga) and use /loadcharset XXX to load XXX.png (or tga).\n\"/loadcharset original\" will restore the 8bit font in your gfx.wad (this is default).",
    "remarks": "This command is just a 'shortcut' for the new gl_consolefont variable."
  },
  "loadfont": {
    "system-generated": true
  },
  "loadfragfile": {
    "description": "Loads the specified fragfile.",
    "syntax": "<filename>"
  },
  "loadloc": {
    "description": "Loads a loc file (must be located in id1/locs, qw/locs, or ezquake/locs.\nThe \".loc\" extension is optional, for example, \"loadloc dm6\"; if the file name has no extension, use its explicit name (\"loadloc dm6.\").",
    "syntax": "<filename>"
  },
  "loadpak": {
    "system-generated": true
  },
  "loadsky": {
    "description": "Loads your skybox (qw\\env).\n\nExample:\nloadsky snow",
    "syntax": "<filename>"
  },
  "localinfo": {
    "description": "Shows or sets localinfo variables. Useful for mod programmers who need to allow the admin to change settings.\nThis is an alternative storage space to the serverinfo space for mod variables. The variables stored in this space are not broadcast on the network.\nThis space also has a 32-kilobyte limit which is much greater then the 512-byte limit on the serverinfo space.\nSpecial Keys: (current map) (next map) - Using this combination will allow the creation of a custom map cycle without editing code.\n\nExamples:\nlocalinfo dm2 dm4\nlocalinfo dm4 dm6\nlocalinfo dm6 dm2"
  },
  "locate": {
    "system-generated": true
  },
  "locations_add": {
    "system-generated": true
  },
  "locations_clearall": {
    "system-generated": true
  },
  "locations_loadfile": {
    "system-generated": true
  },
  "locations_remove": {
    "system-generated": true
  },
  "locations_savefile": {
    "system-generated": true
  },
  "locname": {
    "description": "Create a new location in the current spot."
  },
  "log": {
    "description": "If you type \"log filename\" it will log console to filename.log in your gamedir.\nIt overwrites logs without asking.",
    "syntax": "<filename>"
  },
  "logerrors": {
    "system-generated": true
  },
  "logfile": {
    "system-generated": true
  },
  "logplayers": {
    "system-generated": true
  },
  "logrcon": {
    "system-generated": true
  },
  "logtelnet": {
    "system-generated": true
  },
  "ls": {
    "system-generated": true
  },
  "macrolist": {
    "description": "Prints a list of all available macros."
  },
  "map": {
    "description": "Loads a map and starts a game.\n\nExample:\nmap e1m1"
  },
  "mapgroup": {
    "description": "mapgroup 2fort5r 2fort5: will make 2fort5r and 2fort5 use the 2fort5r textures, locs and etc...",
    "syntax": "mapgroup [map1] [map2] ..."
  },
  "master_rcon_password": {
    "system-generated": true
  },
  "match_forcestart": {
    "description": "Simulates the start of a match (so that auto recording etc is triggered).\nUseful if you join a ktpro server after countdown has started, or you are playing a mode that doesn't have a proper countdown (eg race mode).\nMost importantly this is useful for TF servers, since you can use a msg_trigger to execute match_forcestart on \"MATCH BEGINS NOW\"."
  },
  "match_format_macrolist": {
    "description": "Prints a list of the macros and their meaning for autorecording and autoscreenshots."
  },
  "match_save": {
    "description": "If you are using 'match_auto_record 1' then a temp demo will be recorded to c:\\quake\\ezquake\\temp\\_!_temp_!_.qwd each time a map starts.\nThis temp demo will be overwritten when the next match starts.\nIf you want to keep the temp demo, use the \"match_save\" command. This will move the demo to the same folder and filename that easyrecord would have used."
  },
  "menu_demos": {
    "description": "This command will display the demos menu."
  },
  "menu_fps": {
    "description": "This command will display the fps menu."
  },
  "menu_help": {
    "description": "This command will display the help menu."
  },
  "menu_keys": {
    "description": "This command will display the keys menu."
  },
  "menu_load": {
    "description": "This command will display the singleplayer load menu."
  },
  "menu_main": {
    "description": "This command will display the main menu."
  },
  "menu_mp3_control": {
    "description": "This command will display the mp3 menu."
  },
  "menu_mp3_playlist": {
    "description": "This command will display the mp3 playlist menu."
  },
  "menu_multiplayer": {
    "description": "This command will display the multiplayer menu."
  },
  "menu_options": {
    "description": "This command will display the options menu."
  },
  "menu_quit": {
    "description": "This command will display the quit menu."
  },
  "menu_save": {
    "description": "This command will display the singleplayer save menu."
  },
  "menu_setup": {
    "description": "This command will display the setup menu."
  },
  "menu_singleplayer": {
    "description": "This command will display the singleplayer menu."
  },
  "menu_slist": {
    "description": "This command will display the server browser."
  },
  "menu_video": {
    "description": "This command will display the video menu."
  },
  "messagemode": {
    "description": "Prompts for string to broadcast to all other players."
  },
  "messagemode2": {
    "description": "Prompts for string to broadcast to team members."
  },
  "messagemodeqtvtogame": {
    "description": "Go into message mode for chatting in the QTV chat."
  },
  "mod": {
    "system-generated": true
  },
  "modfraglogfile": {
    "system-generated": true
  },
  "move": {
    "system-generated": true
  },
  "mp3_fadeout": {
    "description": "Like stop but fades out."
  },
  "mp3_fforward": {
    "description": "Fast forward 5seconds."
  },
  "mp3_loadplaylist": {
    "description": "Loads the playlist filename.m3u\n\nExample:\nmp3_loadplaylist top10\n - loads top10.m3u.",
    "syntax": "<filename>"
  },
  "mp3_next": {
    "description": "Next song."
  },
  "mp3_pause": {
    "description": "Pause mp3."
  },
  "mp3_play": {
    "description": "Play mp3."
  },
  "mp3_playlist": {
    "description": "Displays playlist. Currently playing track is highlighted."
  },
  "mp3_playtrack": {
    "description": "Play track number #num from playlist.\n\nExample:\nmp3_playtrack 5\n - plays track 5 from playlist.",
    "syntax": "<track>"
  },
  "mp3_prev": {
    "description": "Previous song."
  },
  "mp3_repeat": {
    "description": "Repeat playlist.",
    "syntax": "<off|on>"
  },
  "mp3_rewind": {
    "description": "Rewind 5seconds."
  },
  "mp3_shuffle": {
    "description": "Shuffle mp3s.",
    "syntax": "<off|on>"
  },
  "mp3_songinfo": {
    "description": "Displays song title and other info like time elapsed, total time, and whether paused, stopped or playing."
  },
  "mp3_startwinamp": {
    "description": "Starts winamp if it is not running."
  },
  "mp3_stop": {
    "description": "Stop mp3."
  },
  "mp3_volume": {
    "system-generated": true
  },
  "msg_trigger": {
    "arguments": [
      {
        "description": "The name of the alias you want to be executed when trigger matches the string.",
        "name": "alias"
      },
      {
        "description": "Case-sensitive substring of the message you want to catch in this trigger.",
        "name": "string"
      },
      {
        "description": "Level of the message.\n0 - pickup messages\n1 - death messages\n2 - critical messages\n3 - chat messages\nEverything else is level 4.",
        "name": "level"
      }
    ],
    "description": "Allows you to set rules that will automatically execute actions when a certain message is sent from a server.\nThis is very useful in Team Fortress, in deathmatch it can be used for example for auto-reporting \"quad in 30\" when you receive \"Quad Damage is wearing out\" message.",
    "remarks": "Only some server messages can be triggered. Usually no pickup messages nor your teammates text is triggered.",
    "syntax": "<alias> <string> [-l] <level>"
  },
  "mute": {
    "system-generated": true
  },
  "mutesound": {
    "system-generated": true
  },
  "mvd_dumpstats": {
    "description": "Dumps statistics gathered from a MVD demo into a \"stats.xml\" file in the current working directory."
  },
  "mvd_list_items": {
    "system-generated": true
  },
  "mvd_name_item": {
    "system-generated": true
  },
  "mvd_remove_item": {
    "system-generated": true
  },
  "mvdrecord": {
    "system-generated": true
  },
  "mvdstop": {
    "system-generated": true
  },
  "netproblem": {
    "description": "HUD element - icon displayed when network traffic is experiencing problems like lost packets, large delay, etc."
  },
  "noclip": {
    "description": "You can fly and go thru objects free mode as spectator",
    "remarks": "Needs cheats support by server."
  },
  "nslookup": {
    "system-generated": true
  },
  "observe": {
    "description": "Connects you to a server as a spectator. If no address is specified, observe will reconnect to the last visited server as a spectator.\n\nExample:\nobserve 123.124.125.126",
    "syntax": "<address>"
  },
  "observeqtv": {
    "system-generated": true
  },
  "order": {
    "system-generated": true
  },
  "packet": {
    "description": "Sends a packet with specified contents to the destination.\n\nExample:\npacket 123.123.123.123:27500 \"status\"",
    "syntax": "<address>"
  },
  "password": {
    "description": "Set the password to enter a password protected server."
  },
  "path": {
    "description": "Shows what paths ezQuake is using."
  },
  "pause": {
    "description": "Pauses a game.",
    "remarks": "Servers must support pausing."
  },
  "penaltylist": {
    "system-generated": true
  },
  "penaltyremove": {
    "system-generated": true
  },
  "place": {
    "system-generated": true
  },
  "play": {
    "description": "Plays a sound effect.\n\nExample:\nplay misc/runekey.wav",
    "syntax": "<filename>"
  },
  "playdemo": {
    "description": "Plays a recorded demo.\n\nExample:\nplaydemo thresh.qwd",
    "syntax": "<filename>"
  },
  "playvol": {
    "description": "Plays a sound at a given volume.\n\nExamples:\nplayvol items/protect.wav .5\nplayvol items/protect.wav 2",
    "syntax": "<filename> (volume)"
  },
  "profile": {
    "description": "Reports information about QuakeC stuff."
  },
  "qstat": {
    "system-generated": true
  },
  "qtv": {
    "arguments": [
      {
        "description": "IP address of the internet QTV broadcasting some QW action",
        "name": "address"
      }
    ],
    "description": "Connects you to internet QTV broadcasting some action, using your local proxy.\nStarts local QTV proxy, tells it what broadcasting proxy it should connect to and by connecting to it you'll see the action broadcasted on the IP you've specified.",
    "syntax": "<address>"
  },
  "qtv_close": {
    "system-generated": true
  },
  "qtv_fixuser": {
    "system-generated": true
  },
  "qtv_list": {
    "system-generated": true
  },
  "qtv_query_demolist": {
    "system-generated": true
  },
  "qtv_query_sourcelist": {
    "system-generated": true
  },
  "qtv_reconnect": {
    "description": "Reconnect to last QTV server the client was connected to."
  },
  "qtv_status": {
    "system-generated": true
  },
  "qtv_update": {
    "system-generated": true
  },
  "qtvplay": {
    "system-generated": true
  },
  "qtvreconnect": {
    "system-generated": true
  },
  "qtvusers": {
    "system-generated": true
  },
  "quit": {
    "description": "Exit - disconnects from the server and closes the client."
  },
  "qwurl": {
    "system-generated": true
  },
  "radar": {
    "description": "HUD element showing a map overview.",
    "syntax": "<property> <value>"
  },
  "rcon": {
    "description": "Issue the set of commands to the server you are currently connected to or have set in rcon_address.\nYou must know the rcon password for that specific server."
  },
  "re_trigger": {
    "arguments": [
      {
        "description": "re_trigger name",
        "name": "rt_name"
      },
      {
        "description": "Regexp defines which messages (or whatever) will activate a trigger.\nThe client uses the PCRE library (Perl-compatible regular expression library).\nYou can find information how to write regexps in the PCRE's documentation.",
        "name": "regexp"
      }
    ],
    "description": "When used w/o parameter, prints a list of all triggers.\nWhen regexp is not defined prints options set for rt_name trigger; otherwise creates or changes rt_name trigger.",
    "syntax": "re_trigger [rt_name [regexp]]"
  },
  "re_trigger_delete": {
    "arguments": [
      {
        "description": "re_trigger name",
        "name": "rt_name"
      }
    ],
    "description": "Deletes the corresponding trigger.",
    "syntax": "re_trigger_delete rt_name"
  },
  "re_trigger_disable": {
    "arguments": [
      {
        "description": "Re_trigger name. Can be REGEXP.",
        "name": "rt_name"
      }
    ],
    "description": "Disables activation of one or more triggers.",
    "syntax": "re_trigger_disable rt_name1 [rt_name2...]"
  },
  "re_trigger_enable": {
    "arguments": [
      {
        "description": "Re_trigger name. Can be REGEXP.",
        "name": "rt_name"
      }
    ],
    "description": "Enables activation of one or more triggers.",
    "syntax": "re_trigger_enable rt_name1 [rt_name2...]"
  },
  "re_trigger_match": {
    "arguments": [
      {
        "description": "re_trigger name",
        "name": "trigger_name"
      },
      {
        "description": "Your string",
        "name": "string"
      }
    ],
    "description": "Allows to direct a <string> to a trigger <trigger_name>. If this string match regexp, then a corresponding alias is activated.",
    "syntax": "re_trigger_match <trigger_name> <string>"
  },
  "re_trigger_options": {
    "arguments": [
      {
        "description": "Value represents a bit mask which determines which types of messages can cause activation of a trigger:\n1 - pickup messages\n2 - death messages\n4 - critical messages (most of Team Fortress messages)\n8 - chat\n16 - centerprint\n32 - echo command output\n64 - other strings printed in the console\nThe default mask for any trigger equals 31.",
        "name": "mask"
      },
      {
        "description": "Sets a minimal interval of trigger activation (in seconds). If a second activation happened earlier than the value time, it is ignored.\nDefault is 0.",
        "name": "interval"
      },
      {
        "description": "If activation of this trigger happened, the remaining (in the list of triggers) triggers are not checked.\nTriggers are checked in a reversed order of their definition.",
        "name": "final"
      },
      {
        "description": "Activation of such trigger doesn't stop the checking of other triggers (default).",
        "name": "notfinal"
      },
      {
        "description": "A string which caused activation of a trigger is not printed on the screen.",
        "name": "remove"
      },
      {
        "description": "A string which caused activation of a trigger is printed on the screen (default).",
        "name": "noremove"
      },
      {
        "description": "A string which caused activation of a trigger is not added to a log-file.",
        "name": "log"
      },
      {
        "description": "A string which caused activation of a trigger is added to a log-file (default).",
        "name": "nolog"
      },
      {
        "description": "A corresponding alias is not executed upon a trigger activation.\nThere is no need to exec alias if all you need is to use remove option :)",
        "name": "noaction"
      },
      {
        "description": "A corresponding alias is executed upon a trigger activation (default).",
        "name": "action"
      }
    ],
    "description": "Changes options for a corresponding trigger.",
    "syntax": "re_trigger_options rt_name option_list"
  },
  "reconnect": {
    "description": "Reconnects to the last server/proxy."
  },
  "record": {
    "description": "Records a demo.\n\nExample:\nrecord test\n - records test.qwd to qw folder",
    "syntax": "<filename>"
  },
  "recordqwd": {
    "system-generated": true
  },
  "register_qwurl_protocol": {
    "system-generated": true
  },
  "removeip": {
    "description": "Removes an IP address from the server IP list.\n\nExamples:\nremoveip 123.123.123.123\nremoveip 123.123.123",
    "syntax": "<ip>"
  },
  "removeloc": {
    "description": "Remove the closest location (use teamsay to see which)."
  },
  "removepak": {
    "system-generated": true
  },
  "reset": {
    "system-generated": true
  },
  "rm": {
    "system-generated": true
  },
  "rmdir": {
    "system-generated": true
  },
  "rotate": {
    "description": "Rotates the player by x degrees.\n\nExample: \"rotate 180\"\n - rotates your POV by 180 degrees.",
    "remarks": "Negative values can also be used for the desired angle."
  },
  "s_audiodevicelist": {
    "system-generated": true
  },
  "s_listdrivers": {
    "system-generated": true
  },
  "s_restart": {
    "system-generated": true
  },
  "save": {
    "description": "Saves a game in singleplayer.\n\nExample:\nsave 123"
  },
  "saveloc": {
    "arguments": [
      {
        "description": "The .loc file the locs should be saved in.",
        "name": "filename"
      }
    ],
    "description": "Saves the current locs in memory to the specified file.",
    "syntax": "<filename>"
  },
  "say": {
    "description": "Broadcasts a string to all other players.\n\nExample:\nsay ezQuake rules!"
  },
  "say_team": {
    "description": "Broadcasts a string to teammates.\n\nExample:\nsay_team stop boring!"
  },
  "sb_buildpingtree": {
    "system-generated": true
  },
  "sb_pingsdump": {
    "description": "Dumps a list of pairs (IP address, ping) into the console based on the current content of the Server Browser list."
  },
  "sb_proxygetpings": {
    "system-generated": true
  },
  "sb_refresh": {
    "description": "Causes Server Browser refresh ping and status info for all servers."
  },
  "sb_sourceadd": {
    "arguments": [
      {
        "description": "Name of the source",
        "name": "name"
      },
      {
        "description": "(IP) address of master server or filename of the server list file",
        "name": "source"
      },
      {
        "description": "\"master\" for master server or \"file\" for server list file",
        "name": "type"
      }
    ],
    "description": "Adds new server list source.",
    "syntax": "<name> <source> <type>"
  },
  "sb_sourcemark": {
    "description": "Marks \"source-name\" as selected server source list.",
    "syntax": "<source-name>"
  },
  "sb_sourcesupdate": {
    "description": "Reload server lists from all marked server sources."
  },
  "sb_sourceunmarkall": {
    "description": "Unmarks all servers sources."
  },
  "score_difference": {
    "description": "HUD element which displays the frag difference between you (your team) and your enemy (enemy team)."
  },
  "score_enemy": {
    "description": "HUD element which displays amount of frags made by all the enemies."
  },
  "score_own": {
    "description": "HUD element which display your (or the person's you are observing) amount of frags."
  },
  "score_position": {
    "description": "HUD element which displays your position on the frag leaders board."
  },
  "screenshot": {
    "arguments": [
      {
        "description": "Optional. When used tells the destination filename.\nIf extension is not preset it will be added automatically according to sshot_format setting.",
        "name": "name"
      }
    ],
    "description": "Saves a still picture of current screen to your hard drive.",
    "syntax": "[name]"
  },
  "script": {
    "system-generated": true
  },
  "serverexec": {
    "system-generated": true
  },
  "serverinfo": {
    "description": "Reports the current server info."
  },
  "serverstatus": {
    "description": "Prints the status of the ezQuake server."
  },
  "set": {
    "arguments": [
      {
        "description": "Name of variable or custom variable.",
        "name": "varname"
      },
      {
        "description": "Value you want to store in the variable.",
        "name": "value"
      }
    ],
    "description": "Sets a variable to a given value.",
    "syntax": "<varname> <value>"
  },
  "set_alias_str": {
    "description": "Assigns variable a value which contains an indicated alias.",
    "syntax": "<cvar> <alias>"
  },
  "set_bind_str": {
    "description": "Assigns variable a value which contains anything bound to an indicated key.",
    "syntax": "<cvar> <key>"
  },
  "set_calc": {
    "arguments": [
      {
        "description": "Name of variable you want to save the result in.",
        "name": "cvar"
      },
      {
        "description": "Possible commands:\nstrlen - gets length of given string\nint - converts given float value to integer\nsubstr - return substring of given string\nset_substr - replaces given position in string with another string\npos - gets position of substring in given string",
        "name": "command"
      },
      {
        "description": "Arguments of commands:\nstrlen <string>\nint <float>\nsubstr <sourcestr> <position> [<length>]\nset_substr <replacestr> <position>\npos <haystack> <needle>",
        "name": "cmdargs"
      },
      {
        "description": "First argument",
        "name": "arg1"
      },
      {
        "description": "Possible operators: +, -, *, /, div, %%, and, or, xor.",
        "name": "oper"
      },
      {
        "description": "Second argument.",
        "name": "arg2"
      }
    ],
    "description": "Advanced variables customization.",
    "syntax": "<cvar command cmdargs> | <cvar arg1 oper arg2>"
  },
  "set_eval": {
    "system-generated": true
  },
  "set_ex": {
    "description": "Assigns a new value to a variable, expansion of %macros and variables is performed even in case if a parameter is inside the dual quotation marks.",
    "syntax": "<cvar> <value>"
  },
  "set_ex2": {
    "system-generated": true
  },
  "set_tp": {
    "system-generated": true
  },
  "setinfo": {
    "description": "Sets information about your FuhWorld user.\nUsed without a key it will list all of your current settings. Specifying a non-existent key and a value will create the new key."
  },
  "setmaster": {
    "description": "Lists the server with up to eight masters.\nWhen a server is listed with a master, the master is aware of the server's IP address and port and it is added to the list of current server connected to a master. A heartbeat is sent to the master from the server to indicated that the server is still running and alive.\n\nExamples:\nsetmaster 192.246.40.12:27002\nsetmaster 192.246.40.12:27002 192.246.40.12:27004"
  },
  "show": {
    "system-generated": true
  },
  "showskins": {
    "system-generated": true
  },
  "sizedown": {
    "description": "Reduces the screen size."
  },
  "sizeup": {
    "description": "Increases the screen size."
  },
  "skins": {
    "description": "Refreshes skin settings.",
    "remarks":"If you have set noskins to 0 and do this it will download all skins that players are using on server."
  },
  "skygroup": {
    "description": "In basics works same as mapgroup.",
    "syntax": "skyboxname map1 [map2] ..."
  },
  "snap": {
    "description": "Remote screenshot from a player.\n\nExample:\nsnap 1234\n - server requests remote screenshot from user 1234",
    "syntax": "<userid>"
  },
  "snapall": {
    "description": "Remote screenshots from all players."
  },
  "soundinfo": {
    "description": "Reports information on the sound system."
  },
  "soundlist": {
    "description": "Reports a list of sounds in the cache."
  },
  "spectator_password": {
    "description": "Sets spectator password to ezQuake local server.",
    "remarks": "Spectators must use \"spectator <password>\" to connect to a server with a spectator password."
  },
  "speed": {
    "description": "Shows your current movement speed."
  },
  "speed2": {
    "description": "An alternative speed-o-meter that is drawn as a half-circle."
  },
  "status": {
    "description": "Reports information on the current connected clients and the server."
  },
  "stop": {
    "description": "Stops demo recording."
  },
  "stopqwd": {
    "system-generated": true
  },
  "stopsound": {
    "description": "Stops all sounds currently being played."
  },
  "sv_democancel": {
    "system-generated": true
  },
  "sv_demoeasyrecord": {
    "system-generated": true
  },
  "sv_demoembedinfo": {
    "system-generated": true
  },
  "sv_demoinfo": {
    "system-generated": true
  },
  "sv_demoinfoadd": {
    "system-generated": true
  },
  "sv_demoinforemove": {
    "system-generated": true
  },
  "sv_demolist": {
    "system-generated": true
  },
  "sv_demolistr": {
    "system-generated": true
  },
  "sv_demolistregex": {
    "system-generated": true
  },
  "sv_demonumremove": {
    "system-generated": true
  },
  "sv_demorecord": {
    "system-generated": true
  },
  "sv_demoremove": {
    "system-generated": true
  },
  "sv_demostop": {
    "system-generated": true
  },
  "sv_gamedir": {
    "description": "Displays or determines the value of the serverinfo *gamedir variable.\nThis is the directory clients will use.\n\nExamples:\ngamedir tf2_5; sv_gamedir fortress\ngamedir ctf4_2; sv_gamedir ctf\ngamedir ktffa; sv_gamedir qw  // FFA servers should use default *gamedir",
    "remarks": "Useful when the physical gamedir directory has a different name than the widely accepted gamedir directory."
  },
  "sv_lastscores": {
    "system-generated": true
  },
  "sv_usercmdtrace": {
    "system-generated": true
  },
  "svadmin": {
    "system-generated": true
  },
  "tcl_eval": {
    "description": "Execute <string> as Tcl code.",
    "syntax": "<string>"
  },
  "tcl_exec": {
    "description": "Execute a config as Tcl script.",
    "syntax": "<filename>"
  },
  "tcl_proc": {
    "description": "Execute a Tcl procedure <name> with parameters <parameters>. Procedure must be defined before thru tcl_eval or tcl_exec commands.",
    "syntax": "<name> [parameters]"
  },
  "tcpconnect": {
    "arguments": [
      {
        "description": "IP address of a QuakeWorld server.",
        "name": "address"
      },
      {
        "description": "TCP port of a QuakeWorld server.",
        "name": "port"
      }
    ],
    "description": "Connects your client to a QuakeWorld server via TCP.",
    "syntax": "<address>:<port>"
  },
  "teamcolor": {
    "description": "This will override team color.\n\nExample:\nteamcolor 12 13",
    "remarks": "If only the shirt color is given, the pant color will match."
  },
  "teamholdbar": {
    "description": "Displays overall map control per team when watching multiview demo."
  },
  "teamholdinfo": {
    "description": "Displays items possession stats per team when watching multiview demo."
  },
  "tempalias": {
    "description": "Sets a temporary alias.\nTempaliases will not save to your config."
  },
  "timedemo": {
    "description": "This command will load and play a demo at full speed. It will then divide the total number of frames in the demo by the total time it took finish, and calculate the average frames-per-second rate.\n\nExample:\ntimedemo demoname",
    "syntax": "<filename>"
  },
  "timedemo2": {
    "system-generated": true
  },
  "timerefresh": {
    "description": "This command will perform a 360 degree turn and calculate the frames-per-second rate."
  },
  "toggle": {
    "description": "You can turn off/on cvars.\n\nExample:\ntoggle sensitivity turns off sensitivity and toggle sensitivity again turns on."
  },
  "toggle_re": {
    "description": "You can turn variable values ON and OFF.\n\nExample:\ntoggle ^gl_part.* - turns all particle effects on/off.",
    "syntax": "[cvar_regexp1] [cvar_regexp2] ... [cvar_regexpN]"
  },
  "toggleconsole": {
    "description": "Brings the console up and down."
  },
  "toggleHUD": {
    "system-generated": true
  },
  "togglemenu": {
    "description": "Displays the menu screens."
  },
  "toggleproxymenu": {
    "system-generated": true
  },
  "togglespec": {
    "system-generated": true
  },
  "tp_msgcoming": {
    "description": "Will send a message to your teammates telling them where you are coming from, and what your status is.\nDoubles as tp_lost when you are dead (because you can't be coming from somewhere if you're dead)."
  },
  "tp_msgenemypwr": {
    "description": "This command could be used for all cases involving players with powerup.\nIf you, a teammate, or enemy has powerup, this bind will report it.\nIf eyes is in your point, we assume enemy only because this is tp_ENEMYpwr, otherwise there is no way to tell if a player with ring is enemy or teammate."
  },
  "tp_msggetpent": {
    "description": "Informs your teammates to get the pent.\nWill print enemy/team pent if you, teammate, or enemy has pent and they're in your point.\nWill print nothing if eyes is in point."
  },
  "tp_msggetquad": {
    "description": "Informs your teammates to get the quad.\nReports team/enemy quad if you, a teammate, or an enemy has quad and they are in your point.\nReports nothing if eyes is in your point."
  },
  "tp_msghelp": {
    "description": "Requests help at a location. Also gives your status."
  },
  "tp_msgitemsoon": {
    "system-generated": true
  },
  "tp_msgkillme": {
    "system-generated": true
  },
  "tp_msglost": {
    "description": "Will send a message to your teammates telling them you died at a location.\nAlso tells them how many enemies are there, and what weapon (if any) you dropped."
  },
  "tp_msgneed": {
    "description": "Equivalent of %u (need macro).\nWill display what you need (health/armor/ammo)."
  },
  "tp_msgnocancel": {
    "system-generated": true
  },
  "tp_msgpoint": {
    "description": "Will report to your team item you see in your point at its location.\nWill report team/enemy powerup if you, a teammate, or an enemy has a powerup and are in your point.",
    "remarks": "Note that tp_pointpriorities defaults to 1 and it is strongly suggested to keep this value. You can alter the priorities of this bind by altering tp_point."
  },
  "tp_msgquaddead": {
    "description": "Reports quad is dead. Will print enemy/team powerup if you, a teammate, or an enemy have quad and are in your point."
  },
  "tp_msgreplace": {
    "description": "Requests a teammate to replace you at your location."
  },
  "tp_msgreport": {
    "description": "Will send a message to your teammates about your current status: health, armor, location, powerups, weapon.\nDoubles as tp_lost when you are dead."
  },
  "tp_msgsafe": {
    "description": "Will send a message to your teammates informing them your current location is safe.\nWill print nothing if there is enemy in your point.\nAlso reports your status."
  },
  "tp_msgslipped": {
    "system-generated": true
  },
  "tp_msgtfconced": {
    "system-generated": true
  },
  "tp_msgtook": {
    "description": "Informs your team of the last item you took.\nSaves each item in memory for 15 seconds."
  },
  "tp_msgtrick": {
    "description": "Requests a trick at a location.\nBest for cases like dm2 when you need a teammate to help you get quad from stairs."
  },
  "tp_msgutake": {
    "system-generated": true
  },
  "tp_msgwaiting": {
    "system-generated": true
  },
  "tp_msgyesok": {
    "system-generated": true
  },
  "tp_pickup": {
    "description": "Item can be: quad, pent, ring, suit, ra, ya, ga, mh, health, lg, rl, gl, sng, ng, ssg, pack, cells, rockets, nails, shells, flag, armor, weapons, powerups, ammo, all, default, none"
  },
  "tp_point": {
    "description": "Specifies which items will be used in point (%x or $point) macro.\nIf you point at an item and such item is not listed here, your message will be tp_name_nothing (default: \"nothing\").\nSupported items: powerups, quad, pent, ring, armor, ra, ya, ga, weapons, lg, rl, gl, sng, ng, ssg, ammo, cells, rockets, nails, shells, players, eyes, teammate, enemy, mh, health, pack, flag, all, default, none, suit\nItem names can be customized with tp_name_item.",
    "syntax": "item1 item2 ... DO NOT USE QUOTES"
  },
  "tp_took": {
    "description": "Specifies which items will be included in the took (%X or $took) macro.\nIf you took an item and it's not listed in tp_took list, %X and $took macro will display tp_name_nothing (default: \"nothing\").\nSupported items: quad, pent, ring, suit, ra, ya, ga, mh, health, lg, rl, gl, sng, ng, ssg, pack, cells, rockets, nails, shells, flag, armor, weapons, powerups, ammo, all, default, none\nItem names can be customized with tp_name_item.",
    "syntax": "item1 item2 ... DO NOT USE QUOTES"
  },
  "track": {
    "system-generated": true
  },
  "track-": {
    "description": "This means when you are spectating or watching an mvd, keys will automatically be assigned to track certain players.\nSo in a 4v4 8 keys are needed, the first 4 make you track the 4 players in the first team and the last 4 make you track the second team."
  },
  "track1": {
    "system-generated": true
  },
  "track2": {
    "system-generated": true
  },
  "track3": {
    "system-generated": true
  },
  "track4": {
    "system-generated": true
  },
  "trackkiller": {
    "description": "Will switch view to the player who killed the player we are tracking at the moment."
  },
  "trackteam": {
    "arguments": [
      {
        "description": "Team number. In standard 4on4 use 1 or 2.",
        "name": "teamnum"
      }
    ],
    "description": "When using MultiView, allows you to assign all available points of view to a desired team.",
    "syntax": "<teamnum>"
  },
  "troubleshoot": {
    "description": "Performs a check on client settings and displays possible sources of issues."
  },
  "unalias": {
    "description": "Example:\nunalias myreport\n - removes myreport alias."
  },
  "unalias_re": {
    "description": "Deletes given alias(es).\n\nExample:\nunalias ^_zoom.\n - removes all aliases beginning with '_zoom', e.g. _zoom_in, _zoom_out",
    "syntax": "<cvar1> [cvar2] ..."
  },
  "unaliasall": {
    "description": "Removes all aliases."
  },
  "unbind": {
    "description": "Example: unbind x delete strings on x button."
  },
  "unbindall": {
    "description": "Removes all keyboard bindings."
  },
  "unignore": {
    "description": "Removes name or user ID number from ignore list.",
    "syntax": "<name|userid>"
  },
  "unignoreAll": {
    "description": "Removes all users from ignore list."
  },
  "unignoreAll_team": {
    "description": "Removes all ignored teams from ignore list."
  },
  "unignore_id": {
    "description": "Removes userid from ignore list.",
    "syntax": "<userid>"
  },
  "unignore_team": {
    "description": "Removes team from ignore list."
  },
  "unignore_voip": {
    "system-generated": true
  },
  "unset": {
    "description": "Removes user-created variable.",
    "syntax": "<cvar1> [cvar2] ..."
  },
  "unset_re": {
    "description": "Removes user-created variable.",
    "syntax": "<cvar1|regex1> [cvar2|regex2] ..."
  },
  "user": {
    "description": "This command queries the user for his setinfo information.",
    "syntax": "<userid>"
  },
  "userdir": {
    "arguments": [
      {
        "description": "String used as the <dir> part in the final path (see 'type' argument below).",
        "name": "dir"
      },
      {
        "description": "Optional number. Default is 0.\n0 - <quake_dir>/<gamedir>/<dir>\n1 - <quake_dir>/<dir>/<gamedir>\n2 - <quake_dir>/qw/<dir>/<gamedir>\n3 - <quake_dir>/qw/<dir>\n4 - <quake_dir>/<dir>\n5 - $HOME/qw/<dir>",
        "name": "type"
      }
    ],
    "description": "A userdir command can be used for addition of directories to the list searched for files by the client (configs, sounds, models, etc.).\nReal handy when several players with their own configs files play Quake on a single computer.\nWhen issuing this command after reconnection to a server or parameter is not defined, a current userdir is printed in the console.",
    "syntax": "[dir [type]]"
  },
  "userinfo": {
    "description": "Prints your user settings."
  },
  "users": {
    "description": "Reports information on connected players and retrieve user IDs."
  },
  "v_cshift": {
    "description": "This adjusts all of the colors currently being displayed.\nUsed when you are underwater, hit, have the Ring of Shadows, or Quad Damage.\n\nExample:\nv_cshift 16 32 64\n",
    "syntax": "<red> <green> <blue> <intensity>"
  },
  "validate_clients": {
    "description": "This shows authed ezQuake users, non-authed and non-ezQuake users."
  },
  "version": {
    "description": "Prints client version number and date into the console."
  },
  "vid_displaylist": {
    "system-generated": true
  },
  "vid_forcemode": {
    "description": "This command will force ezQuake to use a certain video mode."
  },
  "vid_fullscreen": {
    "description": "This command will switch to a fullscreen video mode specified in the \"vid_fullscreen_mode\" variable."
  },
  "vid_gfxinfo": {
    "description": "This command will print out useful information about your video card, GL version, and refresh rate, video mode (width/height resolution and color depth) to console.\nUseful to make sure everything is right, and also to screenshot to show other people."
  },
  "vid_minimize": {
    "description": "This command will minimize the windowed game screen.\nIt was made available because the game takes control over the mouse when it is moved onto the game window thus prohibiting the normal minimization of the game window."
  },
  "vid_modelist": {
    "description": "Prints all supported video modes."
  },
  "vid_restart": {
    "description": "Will restart your video renderer. Needed for some changes to take affect."
  },
  "vid_testmode": {
    "description": "This command will switch to the specified video mode for 5-seconds in order to test it."
  },
  "vid_windowed": {
    "description": "This command will switch the a windowed video mode specified in the \"vid_windowed_mode\" variable."
  },
  "viewalias": {
    "description": "Example:\nviewalias mystatus\n - prints mystatus alias."
  },
  "vip_addip": {
    "system-generated": true
  },
  "vip_listip": {
    "system-generated": true
  },
  "vip_removeip": {
    "system-generated": true
  },
  "vip_writeip": {
    "system-generated": true
  },
  "wait": {
    "description": "Adds one wait frame."
  },
  "weapon": {
    "description": "Weapon selection command.\nWill select the best available weapon according to the sequence you choose.",
    "syntax": "<w1> [<w2> [...]]"
  },
  "windows": {
    "description": "Switches away from client and back to the Windows OS."
  },
  "writeip": {
    "description": "Records all IP addresses on the server IP list. The file name is listip.cfg."
  },
  "z_ext_list": {
    "system-generated": true
  }
}
